// Generated by Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
#ifndef MEDIAPIPETASKSGENAI_SWIFT_H
#define MEDIAPIPETASKSGENAI_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MediaPipeTasksGenAI",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class MPPLLMInferenceOptions;
@class NSString;

/// A MediaPipe task that performs inference using a given Large Language Model.
/// An instance of <code>LlmInference</code> will only be deallocated after all sessions created from it are
/// destroyed. This means that an LLM inference can stay in memory even if a reference to it goes
/// out of scope if at least one of its sessions outlives its scope.
/// Note: Inherits from <code>NSObject</code> for Objective C interoperability.
SWIFT_CLASS_NAMED("LlmInference")
@interface MPPLLMInference : NSObject
/// Creates a new instance of <code>LlmInference</code> with the given options.
/// An instance of <code>LlmInference</code> will only be deallocated after all sessions created from it are
/// destroyed. This means that an LLM inference can stay in memory even if the reference to it
/// goes out of scope if at least one of its sessions outlives its scope.
/// \param options The options of type <code>LlmInference.Options</code> to use for configuring the
/// <code>LlmInference</code>.
///
///
/// throws:
/// An error if <code>LlmInference</code> instance could not be initialized.
- (nullable instancetype)initWithOptions:(MPPLLMInferenceOptions * _Nonnull)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer that creates a new instance of <code>LlmInference</code> from an absolute path
/// to a model asset bundle stored locally on the device and the default <code>LlmInference.Options</code>.
/// An instance of <code>LlmInference</code> will only be deallocated after all sessions created from it are
/// destroyed. This means that an LLM inference can stay in memory even if the reference to it
/// goes out of scope if at least one of its sessions outlives its scope.
/// \param modelPath The absolute path to a model asset bundle stored locally on the device.
///
///
/// throws:
/// An error if <code>LlmInference</code> instance could not be initialized.
- (nullable instancetype)initWithModelPath:(NSString * _Nonnull)modelPath error:(NSError * _Nullable * _Nullable)error;
/// Generates a response based on the input text. This function creates a new session for each
/// call. If you want to have a stateful inference, use <code>LlmInference.Session</code>’s
/// <code>generateResponse()</code> instead.
/// \param inputText A <code>String</code> that is used to query the LLM.
///
///
/// throws:
/// An error if the LLM’s response is invalid.
- (NSString * _Nullable)generateResponseWithInputText:(NSString * _Nonnull)inputText error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Generates a response based on the input text asynchronously. The <code>progress</code> callback returns
/// the partial responses from the LLM or any errors. <code>completion</code> callback is invoked once the
/// LLM is done generating responses. This function creates a new session for each call.
/// If you want to have a stateful inference, use <code>LlmInference.Session</code>’s
/// <code>generateResponseAsync(progress: completion:) throws</code> instead.
/// \param progress A callback invoked when a partial response is available from the LLM.
///
/// \param completion A callback invoked when the LLM finishes response generation.
///
///
/// throws:
/// An error if the LLM’s response is invalid.
- (BOOL)generateResponseAsyncWithInputText:(NSString * _Nonnull)inputText error:(NSError * _Nullable * _Nullable)error progress:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))progress completion:(void (^ _Nonnull)(void))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface MPPLLMInference (SWIFT_EXTENSION(MediaPipeTasksGenAI))
@end

@class MPPLLMInferenceSessionOptions;

/// An <code>LlmInference</code> Session that can be used to execute queries using the LLM that was used to
/// initialize the <code>LlmInference</code> task.
/// You can create multiple query sessions using the same <code>LlmInference</code>. Multiple sessions can
/// be active at the same time. However, you cannot perform simultaneous response generation calls
/// on active sessions created using the same <code>LlmInference</code>. You have to wait for the
/// currently running response generation call to complete before initiating another one.
/// You can also clone an existing session and continue querying the LLM from where you left off.
/// Note: Inherits from <code>NSObject</code> for Objective-C interoperability.
SWIFT_CLASS_NAMED("Session")
@interface MPPLLMInferenceSession : NSObject
/// Creates a new instance of <code>LlmInference.Session</code> with the given options and <code>llmInference</code>.
/// Note: This class maintains a strong reference to <code>llmInference</code>. <code>llmInference</code> will
/// only get deallocated after all sessions created using the <code>llmInference</code> get destroyed.
/// \param options The options of type <code>LlmInference.Session.Options</code> to use for configuring the
/// session.
///
///
/// throws:
/// An error if the session instance could not be initialized.
- (nullable instancetype)initWithLlmInference:(MPPLLMInference * _Nonnull)llmInference options:(MPPLLMInferenceSessionOptions * _Nonnull)options error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// A convenience initializer that creates a new instance of <code>LlmInference.Session</code> from the
/// given <code>llmInference</code> and default options.
/// Note: This class maintains a strong reference to <code>llmInference</code>. <code>llmInference</code> will
/// only get deallocated after all sessions created using the <code>llmInference</code> get destroyed.
/// \param llmInference An instance of <code>LlmInference</code> from which the session must be created.
///
///
/// throws:
/// An error if a new session could not be created from the give <code>llmInference</code>.
- (nullable instancetype)initWithLlmInference:(MPPLLMInference * _Nonnull)llmInference error:(NSError * _Nullable * _Nullable)error;
/// Adds a query chunk to the session. This method can be called multiple times to add multiple
/// query chunks before calling <code>generateResponse()</code> or <code>generateResponseAsync()</code>. The query
/// chunks will be processed in the order they are added, similar to a concatenated prompt,
/// but able to be processed in chunks.
///
/// throws:
/// An error if adding a query chunk to the session fails.
- (BOOL)addQueryChunkWithInputText:(NSString * _Nonnull)inputText error:(NSError * _Nullable * _Nullable)error;
/// Generates a response based on the previously added query chunks synchronously. Use
/// <code>addQueryChunk(inputText:)</code> to add at least one query chunk before calling this function.
/// Note: You cannot invoke simultaneous response generation calls on active sessions created
/// using the same <code>LlmInference</code>. You have to wait for the currently running response
/// generation call to complete before initiating another one.
///
/// throws:
/// An error if the LLM’s response is invalid or if a response generation is
/// currently in progress on any session initialized from the <code>LlmInference</code> used to create
/// this session.
- (NSString * _Nullable)generateResponseAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Generates a response based on the previously added query chunks asynchronously. The
/// <code>progress</code> callback returns the partial responses from the LLM or any errors.
/// <code>completion</code> callback is invoked once the LLM is done generating responses.
/// Use <code>addQueryChunk(inputText:)</code> to add at least one query chunk before calling this function.
/// Note: You cannot invoke simultaneous response generation calls on active sessions created
/// using the same <code>LlmInference</code>. You have to wait for the currently running response
/// generation call to complete before initiating another one.
/// \param progress A callback invoked when a partial response is available from the LLM.
///
/// \param completion A callback invoked when the LLM finishes response generation.
///
///
/// throws:
/// An error if the LLM’s response is invalid or if a response generation is
/// currently in progress on any session initialized from the <code>LlmInference</code> used to create
/// this session.
- (BOOL)generateResponseAsyncAndReturnError:(NSError * _Nullable * _Nullable)error progress:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))progress completion:(void (^ _Nonnull)(void))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface MPPLLMInference (SWIFT_EXTENSION(MediaPipeTasksGenAI))
@end

enum MPPLLMInferenceActivationDataType : NSInteger;

/// Options for setting up a <code>LlmInference</code>.
/// Note: Inherits from <code>NSObject</code> for Objective C interoperability.
SWIFT_CLASS_NAMED("Options")
@interface MPPLLMInferenceOptions : NSObject
/// The absolute path to the model asset bundle stored locally on the device.
@property (nonatomic, copy) NSString * _Nonnull modelPath;
/// The total length of the kv-cache. In other words, this is the total number of input + output
/// tokens the model needs to handle.
@property (nonatomic) NSInteger maxTokens;
/// Maximum top k, which is the max Top-K value supported for all sessions created with the
/// <code>LlmInference</code>, used by GPU only. If a session with Top-K value larger than this is being
/// asked to be created, it will be rejected(throw error). A value of 1 means only greedy
@property (nonatomic) NSInteger maxTopk;
/// The supported lora ranks for the base model. Used by GPU only.
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull supportedLoraRanks;
/// The activation data type for the model.
@property (nonatomic) enum MPPLLMInferenceActivationDataType activationDataType;
/// Creates a new instance of <code>Options</code> with the given <code>modelPath</code> and default values of
/// <code>maxTokens</code>, <code>maxTopk</code>, <code>supportedLoraRanks</code> and <code>activationDataType</code>.
/// This function is only intended to be used from Objective C.
/// \param modelPath The absolute path to a model asset bundle stored locally on the device.
///
- (nonnull instancetype)initWithModelPath:(NSString * _Nonnull)modelPath OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// The activation data type for the model.
typedef SWIFT_ENUM_NAMED(NSInteger, MPPLLMInferenceActivationDataType, "ActivationDataType", open) {
  MPPLLMInferenceActivationDataTypeDefault = 0,
  MPPLLMInferenceActivationDataTypeFloat32 = 1,
  MPPLLMInferenceActivationDataTypeFloat16 = 2,
  MPPLLMInferenceActivationDataTypeInt16 = 3,
  MPPLLMInferenceActivationDataTypeInt8 = 4,
};


@interface MPPLLMInferenceSession (SWIFT_EXTENSION(MediaPipeTasksGenAI))
@end


/// Options for setting up a <code>LlmInference.Session</code>.
/// Note: Inherits from <code>NSObject</code> for Objective-C interoperability.
SWIFT_CLASS_NAMED("Options")
@interface MPPLLMInferenceSessionOptions : NSObject
/// The top K number of tokens to be sampled from for each decoding step. A value of 1 means
/// greedy decoding. Defaults to 40.
@property (nonatomic) NSInteger topk;
/// Maximum cumulative probability over the tokens to sample from in each decoding step for
/// top-p / nucleus sampling.
@property (nonatomic) float topp;
/// The randomness when decoding the next token. A value of 0.0f means greedy decoding. Defaults
/// to 0.8.
@property (nonatomic) float temperature;
/// The random seed for sampling tokens.
@property (nonatomic) NSInteger randomSeed;
/// The optional absolute path to the LoRA model asset bundle stored locally on the device.
/// This is only compatible with GPU models.
@property (nonatomic, copy) NSString * _Nullable loraPath;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif
